#include <iostream>
#include <ctime>
#include <random>
#include <string>
#include <vector>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <iomanip>
#include <direct.h> // for _chdir on Windows

std::vector<std::string> generateRandomMessages() {
    return {
        "feat: Initial commit",
        "docs: Updated README",
        "fix: Fixed bug",
        "feat: Added new feature",
        "refactor: Refactored code",
        "docs: Updated documentation",
        "perf: Improved performance",
        "chore: Code cleanup",
        "fix: Fixed typo",
        "chore: Minor update"
    };
}

std::string getRandomMessage(const std::vector<std::string>& messages, std::mt19937& rng) {
    std::uniform_int_distribution<uint16_t> dist(0, messages.size() - 1);
    return messages[dist(rng)];
}

std::string generateCommitTime(const std::tm& current_date, std::mt19937& rng) {
    std::uniform_int_distribution<uint16_t> hour_dist(9, 17);
    std::uniform_int_distribution<uint16_t> minute_dist(0, 59);
    std::uniform_int_distribution<uint16_t> second_dist(0, 59);

    std::tm random_time = current_date;
    random_time.tm_hour = hour_dist(rng);
    random_time.tm_min = minute_dist(rng);
    random_time.tm_sec = second_dist(rng);

    char buffer[20];
    std::strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%S", &random_time);
    return std::string(buffer);
}

int runGitCommand(const std::string& command) {
    return std::system(command.c_str());
}

std::string formatDate(std::tm date) {
    char buffer[11];
    std::strftime(buffer, sizeof(buffer), "%Y-%m-%d", &date);
    return std::string(buffer);
}

void writeReadme(const std::string& repo_name, const std::string& date, uint32_t commit_number) {
    std::ofstream readme("README.md");
    readme << "**" << repo_name << "**\n\n\nGenerated by C++ on **" << date << "** - Commit " << commit_number << "\n";
    readme.close();
}

std::tm incrementDate(const std::tm& date) {
    std::tm new_date = date;
    new_date.tm_mday += 1;
    std::mktime(&new_date); // Normalize the time structure
    return new_date;
}

void clearScreen() {
    // For Windows
    std::system("pause");
    std::system("cls");
}

void showIntroMessage() {
    std::cout << "Wall Painter, a tool for filling your GitHub contribution wall, was developed by Mystic Lintha.\n\n";
    std::cout << "* Please note that this tool is for entertainment only, please make sure your target repository is not an important repository, and do not use this tool for any illegal purposes!\n\n\n";
}

int main(int argc, char* argv[]) {
    std::random_device rd;
    std::mt19937 rng(rd());

    std::string username;
    std::string access_token;
    std::string repo_name;
    std::string start_date_str;
    std::string end_date_str;
    uint32_t min_commits;
    uint32_t max_commits;

    while (true) {
        showIntroMessage();

        std::cout << "GitHub Username: ";
        std::getline(std::cin, username);
        std::cout << "GitHub Access Token: ";
        std::getline(std::cin, access_token);
        std::cout << "GitHub Repository Name: ";
        std::getline(std::cin, repo_name);
        std::cout << "Start Date (YYYY-MM-DD): ";
        std::getline(std::cin, start_date_str);
        std::cout << "End Date (YYYY-MM-DD): ";
        std::getline(std::cin, end_date_str);
        std::cout << "Minimum Commits Per Day: ";
        std::cin >> min_commits;
        std::cout << "Maximum Commits Per Day: ";
        std::cin >> max_commits;
        std::cin.ignore(); // Ignore newline left in buffer

        if (username.empty() || access_token.empty() || repo_name.empty() || start_date_str.empty() || end_date_str.empty() || min_commits > max_commits) {
            std::system("cls");
            std::cerr << "Invalid input. Please ensure all fields are filled correctly and min_commits is less than or equal to max_commits.\n";
            std::system("pause");
            continue;
        }

        std::string mkdir_command = std::string("mkdir ") + repo_name;
        std::system(mkdir_command.c_str());
        if (_chdir(repo_name.c_str()) != 0) {
            std::cerr << "Failed to change directory to " << repo_name << std::endl;
            return 1;
        }
        runGitCommand("git init");

        std::vector<std::string> messages = generateRandomMessages();

        std::tm current_date = {};
        std::stringstream ss(start_date_str);
        ss >> std::get_time(&current_date, "%Y-%m-%d");

        std::tm end_date = {};
        std::stringstream se(end_date_str);
        se >> std::get_time(&end_date, "%Y-%m-%d");

        while (std::difftime(std::mktime(&current_date), std::mktime(&end_date)) <= 0) {
            uint32_t num_commits = std::uniform_int_distribution<uint32_t>(min_commits, max_commits)(rng);

            for (uint32_t i = 0; i < num_commits; ++i) {
                std::string formatted_date = formatDate(current_date);
                writeReadme(repo_name, formatted_date, i + 1);
                runGitCommand("git add .");

                std::string commit_time = generateCommitTime(current_date, rng);
                std::string commit_message = getRandomMessage(messages, rng);
                std::string commit_command = "git commit --date=\"" + commit_time + "\" -m \"" + commit_message + "\"";
                int result = runGitCommand(commit_command);
                if (result != 0) {
                    std::cerr << "Failed to commit: " << commit_message << std::endl;
                    return 1;
                }
            }

            current_date = incrementDate(current_date);
        }

        std::cout << "\n\nPushing your commits to the remote repository...\n";

        std::string remote_add_command = "git remote add origin https://" + access_token + "@github.com/" + username + "/" + repo_name + ".git";
        runGitCommand(remote_add_command);
        runGitCommand("git branch -M main");

        for (size_t i = 1; i <= 3; ++i) {
            std::cout << "\nTrying push (" << i << ")..." << std::endl;
            if (runGitCommand("git push -u origin main -f") == 0) {
                break;
            }
        }

        if (_chdir("..") != 0) {
            std::cerr << "Failed to change directory to parent" << std::endl;
            return 1;
        }
        std::string rmdir_command = std::string("rm -rf ") + repo_name;
        std::system(rmdir_command.c_str());

        std::cout << "\nPush completed, check your profile now: https://github.com/" << username << "\n"
            << "\nPlease press any key to start the next task.\n\n";

        clearScreen();
    }

    return 0;
}
